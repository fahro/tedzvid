{"version":3,"sources":["Letters/Arabic.js","Helpers/Streplace.js","Player/Player.js","Lessons/Lesson1.js","App.js","serviceWorker.js","index.js"],"names":["Arabic","props","str","regex","replacer","arabicTxt","children","replacedTxt","arabic","match","i","react_default","a","createElement","key","className","Array","isArray","RegExp","concat","join","reactStringReplace","console","log","dir","lang","bold","React","memo","_useAudio","url","_useState","useState","Audio","audio","Object","slicedToArray","_useState3","_useState4","playing","setPlaying","useEffect","play","onended","volume","pause","currentTime","useAudio","_useAudio2","toggle","id","onClick","L1","r1","data","row1","map","dat","src_Player_Player","Letters_Arabic","highlight","word","after","Fragment","Row","Col","Button","variant","block","App","Container_default","Lesson1","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b8513e52.chunk.js","sourcesContent":["import React from 'react';\r\nimport myReactStringReplace from '../Helpers/Streplace';\r\n\r\nfunction Arabic (props) {\r\n    const arabicTxt = props.children;\r\n\r\n    const replacedTxt = myReactStringReplace(arabicTxt, props.arabic, (match, i) => (\r\n        <span key={'rp' + i} className='oznaceno'>{match}</span>\r\n    ));\r\n\r\n    console.log(replacedTxt)\r\n\r\n    return <span dir='rtl'\r\n                lang='ar'\r\n                className={ props.bold ? \"arap-red\" : \"arapski\" }\r\n            >\r\n\r\n        { props.arabic ? replacedTxt : props.children }\r\n\r\n    </span>\r\n}\r\n\r\nexport default Arabic;","import reactStringReplace from 'react-string-replace';\r\n\r\nexport default function myReactStringReplace(str, regex, replacer) {\r\n  if (Array.isArray(regex)) regex = new RegExp(`(${regex.join('|')})`, 'gi');\r\n  return reactStringReplace(str, regex, replacer);\r\n}","import React, { useState, useEffect } from \"react\";\r\n\r\nconst useAudio = url => {\r\n  const [audio] = useState(new Audio(url));\r\n  const [playing, setPlaying] = useState(false);\r\n\r\n  const toggle = () => setPlaying(!playing);\r\n\r\n  useEffect(\r\n    () => {\r\n      if (playing) {\r\n        audio.play();\r\n        audio.onended = () => { setPlaying(!playing) };\r\n        audio.volume = 0.1;\r\n      } else {\r\n        audio.pause();\r\n        audio.currentTime = 0;\r\n      }\r\n    },\r\n    [audio, playing]\r\n  );\r\n\r\n  return [playing, toggle];\r\n};\r\n\r\nconst Player = (props) => {\r\n  const [playing, toggle] = useAudio(props.url);\r\n\r\n  return (\r\n      <span\r\n          id='rijeciAudio'\r\n          className={ playing ? 'svira' : 'ne-svira' }\r\n          onClick={toggle}\r\n      >\r\n          { playing ? props.children : props.children }\r\n      </span>\r\n  );\r\n};\r\n\r\nexport default React.memo(Player);","import React from 'react';\r\nimport data from '../Data/L1Data.json';\r\n\r\n// Bootstrap\r\nimport {Row, Col, Button} from 'react-bootstrap';\r\n\r\n// Other\r\nimport '../App.scss';\r\nimport Arabic from '../Letters/Arabic';\r\nimport Player from '../Player/Player';\r\n\r\nfunction L1() {\r\n    const r1 = data.row1.map((dat) => {\r\n      return <span key={'key' + dat.id}>\r\n      <Player url={dat.url} key={'p' + dat.id}>\r\n        <Arabic\r\n          arabic={dat.highlight}\r\n          key={'a' + dat.id}\r\n        >{dat.word}</Arabic>\r\n      </Player> {dat.after === 'break' ? <br/> : dat.after}\r\n      </span>\r\n    });\r\n\r\n    return (\r\n        <React.Fragment>\r\n        <nav className=\"mainmenu\">\r\n          <ul className=\"mainmenulist\">\r\n            <li className=\"mainmenuitem\">Lekcije ١</li>\r\n            <li className=\"mainmenuitem\">Lekcije ٢</li>\r\n            <li className=\"mainmenuitem\">Lekcije ٣</li>\r\n            <li className=\"mainmenuitem\">Lekcije ٤</li>\r\n            <li className=\"mainmenuitem\">Lekcije ٥</li>\r\n          </ul>\r\n        </nav>\r\n\r\n        <Row>\r\n          <Col>\r\n            <h2 className=\"text-center font-weight-bold text-uppercase\">Vakf</h2>\r\n            <h4 className=\"text-center\">stajanje prilikom učenja</h4>\r\n            <hr/>\r\n          </Col>\r\n        </Row>\r\n\r\n        <Row>\r\n          <Col className=\"opisLekcije\">\r\n            Prilikom učenja Kur'ana, učač može stati u sljedećim situacijama: ako je kraj ajeta, ako postoji znak za stajanje i kada mu ponestane daha. To čini na sljedeći način:\r\n          </Col>\r\n        </Row>\r\n\r\n        <Row>\r\n          <Col className=\"opisLekcije my-3\">\r\n            <strong>1.</strong>\tKada riječ na kojoj staje završava kratkim vokalom E  ــــــَــــــ , I   ـــــــِـــــ, U  ــــــُــــــ ili tenvinom IN ـــــٍــــــ ,  UN  ــــــٌــــــ, stat će kao da je na riječi sukun  ــــــْــــــ, npr.:\r\n          </Col>\r\n        </Row>\r\n        \r\n        <Row>\r\n          <Col>\r\n            { r1 }\r\n          </Col>\r\n        </Row>\r\n\r\n        <hr/>\r\n        <Row>\r\n          <Col className=\"text-left\">\r\n            <Button variant=\"success\" block>\r\n              Prethodna lekcija\r\n            </Button>\r\n          </Col>\r\n          <Col className=\"text-left\">\r\n            <Button variant=\"secondary\" block>\r\n              Na početak\r\n            </Button>\r\n          </Col>\r\n          <Col className=\"text-right\">\r\n            <Button variant=\"success\" block>\r\n              Sljedeća lekcija\r\n            </Button>\r\n          </Col>\r\n        </Row>\r\n\r\n        </React.Fragment>\r\n    );\r\n  }\r\n\r\n  export default L1;","import React from 'react';\r\nimport L1 from './Lessons/Lesson1';\r\nimport Container from 'react-bootstrap/Container';\r\n\r\nfunction App() {\r\n  return (\r\n    <Container className=\"lekcije-wrapper my-auto\">\r\n      <L1/>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}